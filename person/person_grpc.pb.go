// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: person/person.proto

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetEmployeeClient is the client API for GreetEmployee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetEmployeeClient interface {
	GetEmployeeSendPerson(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Person, error)
	GetEmployeeSendPeople(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*People, error)
}

type greetEmployeeClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetEmployeeClient(cc grpc.ClientConnInterface) GreetEmployeeClient {
	return &greetEmployeeClient{cc}
}

func (c *greetEmployeeClient) GetEmployeeSendPerson(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/person.GreetEmployee/GetEmployeeSendPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetEmployeeClient) GetEmployeeSendPeople(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*People, error) {
	out := new(People)
	err := c.cc.Invoke(ctx, "/person.GreetEmployee/GetEmployeeSendPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreetEmployeeServer is the server API for GreetEmployee service.
// All implementations must embed UnimplementedGreetEmployeeServer
// for forward compatibility
type GreetEmployeeServer interface {
	GetEmployeeSendPerson(context.Context, *Employee) (*Person, error)
	GetEmployeeSendPeople(context.Context, *Employee) (*People, error)
	mustEmbedUnimplementedGreetEmployeeServer()
}

// UnimplementedGreetEmployeeServer must be embedded to have forward compatible implementations.
type UnimplementedGreetEmployeeServer struct {
}

func (UnimplementedGreetEmployeeServer) GetEmployeeSendPerson(context.Context, *Employee) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeSendPerson not implemented")
}
func (UnimplementedGreetEmployeeServer) GetEmployeeSendPeople(context.Context, *Employee) (*People, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeSendPeople not implemented")
}
func (UnimplementedGreetEmployeeServer) mustEmbedUnimplementedGreetEmployeeServer() {}

// UnsafeGreetEmployeeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetEmployeeServer will
// result in compilation errors.
type UnsafeGreetEmployeeServer interface {
	mustEmbedUnimplementedGreetEmployeeServer()
}

func RegisterGreetEmployeeServer(s grpc.ServiceRegistrar, srv GreetEmployeeServer) {
	s.RegisterService(&GreetEmployee_ServiceDesc, srv)
}

func _GreetEmployee_GetEmployeeSendPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetEmployeeServer).GetEmployeeSendPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.GreetEmployee/GetEmployeeSendPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetEmployeeServer).GetEmployeeSendPerson(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetEmployee_GetEmployeeSendPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetEmployeeServer).GetEmployeeSendPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.GreetEmployee/GetEmployeeSendPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetEmployeeServer).GetEmployeeSendPeople(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

// GreetEmployee_ServiceDesc is the grpc.ServiceDesc for GreetEmployee service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetEmployee_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "person.GreetEmployee",
	HandlerType: (*GreetEmployeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEmployeeSendPerson",
			Handler:    _GreetEmployee_GetEmployeeSendPerson_Handler,
		},
		{
			MethodName: "GetEmployeeSendPeople",
			Handler:    _GreetEmployee_GetEmployeeSendPeople_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person/person.proto",
}
